diff -Naur a/pkg/win32/polipo.conf b/pkg/win32/polipo.conf
--- a/pkg/win32/polipo.conf	2008-04-06 00:00:07.066809000 +0000
+++ b/pkg/win32/polipo.conf	2009-03-07 12:47:21.712807024 +0000
@@ -35,7 +35,6 @@
 # parentProxy = "squid.example.org:3128"
 
 # Uncomment this if you want to use a parent SOCKS proxy:
-
 socksParentProxy = "localhost:9050"
 socksProxyType = socks5
 
@@ -88,7 +87,7 @@
 # Uncomment this if you want to contact IPv4 hosts only (and make DNS
 # queries somewhat faster):
 #
-# dnsQueryIPv6 = no
+dnsQueryIPv6 = no
 
 # Uncomment this if you want Polipo to prefer IPv4 to IPv6 for
 # double-stack hosts:
@@ -99,7 +98,9 @@
 # default resolver instead.  If you do that, Polipo will freeze during
 # every DNS query:
 
-dnsUseGethostbyname = yes
+# For Tor VM we transparently proxy DNS and thus don't need to use this
+# slow resolver
+# dnsUseGethostbyname = yes
 
 
 ### HTTP
diff -Naur a/pkg/win32/vidalia.wxs.in b/pkg/win32/vidalia.wxs.in
--- a/pkg/win32/vidalia.wxs.in	2009-02-24 05:46:46.615879000 +0000
+++ b/pkg/win32/vidalia.wxs.in	2009-03-09 16:26:33.282871496 +0000
@@ -1,334 +1,369 @@
 <?xml version="1.0" encoding="Windows-1252" ?>
 <!-- 
-  $Id: vidalia.wxs.in 3586 2009-02-24 05:46:46Z edmanm $
+  $Id: vidalia.wxs.in 3329 2008-11-21 02:04:34Z edmanm $
+
+  This file is part of Vidalia, and is subject to the license terms in the
+  LICENSE file, found in the top level directory of this distribution. If 
+  you did not receive the LICENSE file with this file, you may obtain it
+  from the Vidalia source package distributed by the Vidalia Project at
+  http://www.vidalia-project.net/. No part of Vidalia, including this file,
+  may be copied, modified, propagated, or distributed except according to
+  the terms described in the LICENSE file.
+
+  Compile with: 
+    candle.exe vidalia.wxs
+    light.exe vidalia.wixobj -out vidalia.msi -ext C:\Path\to\Wix\bin\WixUIExtension.dll
  -->
 <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
+  <?define ThisProductVersion="@VER_MAJOR@.@VER_MINOR@.@VER_PATCH@" ?>
+  <?define ThisProductVersionDisp="@VERSION@" ?>
+  <?define VidaliaVersion="@VERSION@" ?>
+  <?define TorVersion="latest" ?>
+  <?define TorbuttonVersion="latest" ?>
+  <?define PolipoVersion="latest" ?>
+  <?define PrivoxyVersion="latest" ?>
+  <?define VidaliaBundleVersion="bundle-@VERSION@" ?>
+  <?define UpgradeCode="147903e8-fa6f-47f0-bf97-b7250337b2b7" ?>
+  
+  <?define CurrProductGUID="0a57c31b-6cce-4bd0-b3ef-652a6cceb914" ?>
+  <?define CurrExecutableGUID="737794bc-3662-4f12-9755-86568c3164e0" ?>
+  <?define CurrQtLibsGUID="90548e2f-390e-4b93-b844-24ee75a83d4e" ?>
+  <?define CurrCryptoLibsGUID="d887b89a-984f-4301-9f18-7811361372d3" ?>
+  <?define CurrMingwLibsGUID="86b879cf-306f-438e-b38f-b9e6d74152cb" ?>
+  <?define CurrGeoIPCacheGUID="8686ff7a-d812-44db-8c11-b94478495096" ?>
+  <?define CurrPolipoConfigGUID="2151ad60-10ce-4e91-ab44-d1895d3b001d" ?>
+  <?define CurrMarblePluginGUID="0212a411-960d-4729-b03b-3c95777a4551" ?>
+  <?define CurrPluginDataDirGUID="e72719f3-e92c-4b2c-a8bb-4865436f5734" ?>
+  <?define CurrPluginImageFormatsGUID="26ad5c24-249d-4619-be36-fb701e5b3f81" ?>
+  <?define CurrDocumentsGUID="abfaae86-352e-4b63-b9b3-c222936f24b3" ?>
+  <?define CurrConfigFileGUID="4428ffd8-710d-4550-b51d-16e69e073981" ?>
+  <?define CurrStartMenuGUID="69d3f4bb-755c-4ade-aeb1-771fd5f8ba60" ?>
+  <?define CurrDesktopGUID="65ff7a92-7e27-4d20-b925-8b86387bc56c" ?>
+  <?define CurrDocsOnDesktopGUID="1e141231-e111-4567-94a6-7f42def8a516" ?>
+  <?define CurrStartupGUID="6073bd5b-8eee-465e-9eca-f1ec7c6ddd67" ?>
+  <?define CurrLocalProgramsGUID="24aaf630-09aa-45ef-a3cc-4088302b3488" ?>
 
-  <?define VidaliaVersion="@VER_MAJOR@.@VER_MINOR@.@VER_PATCH@" ?>
-  <?define VidaliaUpgradeCode="B7FBFE11-D7CA-4895-A1FB-1D7E065E4D04" ?>
-  <?define VidaliaProductGuid="B3C22D59-D907-4559-9569-92AAA34DB6F0" ?>
-  <?define VidaliaDocumentsGuid="6A51C86C-A7D4-407f-9B84-7ADCE016E939" ?>
-  <?define QtLibraryGuid="00F354CB-B313-4100-8900-11293A66B385" ?>
-  <?define QtImageFormatPluginsGuid="9A0F1EA5-3A5F-4456-B211-9368C24E22F3" ?>
-  <?define MinGWLibraryGuid="2287E844-F9CD-4129-8BD0-50D071698194" ?>
-  <?define OpenSSLLibraryGuid="C3EDC2EC-D0B1-452a-83A6-85B0BC94735B" ?>
-  <?define MarbleWidgetLibraryGuid="A2968B8D-0E23-4649-B8F3-A988A04F823C" ?>
-  <?define MarblePluginsGuid="B4665EC1-3082-4fca-AA7E-60512ED62EF6" ?>
-  <?define MarbleLegendsDataGuid="FA6F733F-8249-4b2b-B978-2AA04E06F5D5" ?>
-  <?define MarbleBlueMarbleDataGuid="392FEE6B-374A-447a-AECC-0422915305DB" ?>
-  <?define MarbleCityLightsDataGuid="DBF9FBE7-012D-4457-ABB4-9085F7E784F8" ?>
-  <?define MarbleMwdbiiDataGuid="56ACE658-6892-408a-91E5-7B5BD23D8829" ?>
-  <?define MarbleSrtmDataGuid="2C3A9C67-92CB-4fc6-A2F6-AD9118AFD58C" ?>
-  <?define MarblePlacemarkDataGuid="27D54547-A819-435b-9A0C-13284169A9D9" ?>
-  <?define MarbleStarsDataGuid="8C5C3F32-67E6-4a4a-9B6C-6D67A6D44D67" ?>
-  <?define MarbleSvgDataGuid="03E25BCA-4C58-4571-9F17-061D52877714" ?>
-
-  <Product Name="Vidalia @VERSION@" Id="$(var.VidaliaProductGuid)"
-           Language="1033" Codepage="1252"
-           Version="$(var.VidaliaVersion)" 
+  <Product Name="Vidalia $(var.ThisProductVersionDisp)" Id="$(var.CurrProductGUID)"
+           Version="$(var.ThisProductVersion)"
            Manufacturer="vidalia-project.net"
-           UpgradeCode="$(var.VidaliaUpgradeCode)">
+           Language="!(loc.LCID)"
+           UpgradeCode="$(var.UpgradeCode)">
     
     <Package Id="*" Keywords="Installer"
-             Description="Vidalia @VERSION@ Installer"
+             Description="Vidalia $(var.ThisProductVersionDisp) Installer"
              Manufacturer="vidalia-project.net"
-             InstallerVersion="100" Compressed="yes"
-             Languages="1033"  SummaryCodepage="1252" />
+             InstallerVersion="200" Compressed="yes"
+             InstallPrivileges="limited" />
+
+    <!-- Properties used for variable replacement in translations. -->
+    <Property Id="LANGUAGE_CODE" Value="!(loc.LanguageCode)" />
+    <Property Id="VIDALIA_NAME" Value="Vidalia" />
+    <Property Id="VIDALIA_DESC" Value="Vidalia $(var.VidaliaVersion)" />
+    <Property Id="TOR_NAME" Value="Tor" />
+    <Property Id="TOR_DESC" Value="Tor $(var.TorVersion)" />
+    <Property Id="PRIVOXY_NAME" Value="Privoxy" />
+    <Property Id="PRIVOXY_DESC" Value="Privoxy $(var.PrivoxyVersion)" />
+    <Property Id="POLIPO_NAME" Value="Polipo" />
+    <Property Id="POLIPO_DESC" Value="Polipo $(var.PolipoVersion)" />
+    <Property Id="TORBUTTON_NAME" Value="Torbutton" />
+    <Property Id="TORBUTTON_DESC" Value="Torbutton $(var.TorbuttonVersion)" />
+    <Property Id="BUNDLE_NAME" Value="Vidalia Bundle" />
+    <Property Id="BUNDLE_DESC" Value="Vidalia Bundle $(var.VidaliaBundleVersion)" />
 
     <Media Id="1" Cabinet="Vidalia.cab" CompressionLevel="high"
            EmbedCab="yes" DiskPrompt="CD-ROM #1" />
-    <Property Id="DiskPrompt" Value="Vidalia @VERSION@ Installation [1]" />
-
-    <Upgrade Id="$(var.VidaliaUpgradeCode)">
-      <UpgradeVersion Property="UPGRADEFOUND" OnlyDetect="no"
-                      Minimum="0.0.1" IncludeMinimum="yes"
-                      Maximum="$(var.VidaliaVersion)" IncludeMaximum="no" />
+    <Property Id="DiskPrompt" Value="Vidalia $(var.ThisProductVersionDisp) Installation Volume [1]" />
+    <Property Id="ALLUSERS" Secure="yes"/>
+    <Property Id="ReinstallModeText">omus</Property>
+
+    <!-- To avoid placing shortcuts all over the desktop / start menu during a
+    silent installation the NOSC=1 option can be passed to omit shortcuts.
+    This is useful if bundled with other applications like Vidalia that manage
+    configuration and Tor related processes themselves.
+      -->
+    <Property Id="NOSC" Secure="yes"/>
+
+    <!-- Associate this package with the upgrade code for this series
+    to ensure that upgrade installations by Thandy or other means work
+    as expected.
+    The OnlyDetect option must be false to ensure that existing files
+    from an older version are removed and replaced with current files.
+      -->
+    <Upgrade Id="$(var.UpgradeCode)">
+      <UpgradeVersion
+        Property="UPGRADEFOUND"
+        OnlyDetect="no"
+        Minimum="0.0.1"
+        IncludeMinimum="yes"
+        Maximum="$(var.ThisProductVersion)"
+        IncludeMaximum="no"
+      />
     </Upgrade>
 
-    <!-- Define the target installation directory hierarchy -->
+
     <Directory Id="TARGETDIR" Name="SourceDir">
-      <Directory Id="ProgramFilesFolder" Name="ProgramFilesDir">
-        <Directory Id="INSTALLDIR" Name="Vidalia">
-          <Directory Id="PluginsDir" Name="plugins">
-            <Directory Id="QtPluginsDir" Name="qt">
-              <Directory Id="QtImageFormatPluginsDir" Name="imageformats" />
-            </Directory>
-            <Directory Id="MarblePluginsDir" Name="marble" />
-          </Directory>
-          <Directory Id="MarbleDataDir" Name="data">
-            <Directory Id="MarbleMapsDir" Name="maps">
-              <Directory Id="MarbleEarthMapsDir" Name="earth">
-                <Directory Id="MarbleBlueMarbleDataDir" Name="bluemarble" />
-                <Directory Id="MarbleCityLightsDataDir" Name="citylights" />
-                <Directory Id="MarbleSrtmDataDir" Name="srtm" />
-              </Directory>
-            </Directory>
-            <Directory Id="MarbleMwdbiiDir" Name="mwdbii" />
-            <Directory Id="MarblePlacemarkDataDir" Name="placemarks" />
-            <Directory Id="MarbleStarsDataDir" Name="stars" />
-            <Directory Id="MarbleSvgDataDir" Name="svg" />
-          </Directory>
-        </Directory>
-      </Directory>
-    </Directory>
+      <Directory Id="LocalAppDataFolder" Name="LocalAppData">
+       <Directory Id="LocalProgramsFolder" Name="Programs">
 
-    <DirectoryRef Id="INSTALLDIR">
-      <!-- Main Vidalia application files -->
-      <Component Id="VidaliaExecutable" Guid="*">
-        <File Id="VidaliaExe" DiskId="1"
-              Name="vidalia.exe" Source="@Vidalia_BINARY_DIR@\src\vidalia\vidalia.exe" />
-      </Component>
+         <!-- Until proper support for per-user installs is available we manage Programs folder.
+         Note that this directory will be left in place if it is in use by any other app.
+           -->
+         <Component Id="LocalProgramsFolderRef" Guid="$(var.CurrLocalProgramsGUID)">
+           <CreateFolder/>
+           <RemoveFolder Id="RemoveLocalProgramsFolder" On="uninstall" />
+           <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
+             <RegistryValue Name="LocalProgramsFolderRef" Value="1" Type="integer" KeyPath="yes" />
+           </RegistryKey>
+         </Component>
+
+         <Directory Id="LocalProgramsInstDir" Name="Vidalia">
+
+          <!-- Main Vidalia application files -->
+          <Component Id="VidaliaExecutable" Guid="$(var.CurrExecutableGUID)">
+            <CreateFolder/>
+            <RemoveFolder Id="RemoveLocalProgramsInstDir" On="uninstall" />
+            <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
+              <RegistryValue Name="Version" Value="$(var.ThisProductVersion)" Type="string" KeyPath="yes" />
+            </RegistryKey>
+            <File Id="VidaliaExe" DiskId="1"
+                  Name="vidalia.exe" Source="bin\vidalia-2d.exe" />
+<?ifndef NOMARBLE ?>
+            <File Id="VidaliaMarbleExe" DiskId="1"
+                  Name="vidalia-marble.exe" Source="bin\vidalia-marble.exe" />
+<?endif?>
+          </Component>
 
-      <!-- Vidalia-related documents -->
-      <Component Id="VidaliaDocuments" Guid="$(var.VidaliaDocumentsGuid)">
-        <File Id="VidaliaReadme" DiskId="1"
-              Name="README" Source="@Vidalia_SOURCE_DIR@\README" />
-        <File Id="VidaliaCredits" DiskId="1"
-              Name="CREDITS" Source="@Vidalia_SOURCE_DIR@\CREDITS" />
-        <File Id="VidaliaChangeLog" DiskId="1"
-              Name="CHANGELOG" Source="@Vidalia_SOURCE_DIR@\CHANGELOG" />
-        <File Id="VidaliaLicense" DiskId="1"
-              Name="LICENSE" Source="@Vidalia_SOURCE_DIR@\LICENSE" />
-        <File Id="VidaliaLicenseGplV2" DiskId="1"
-              Name="LICENSE-GPLV2" Source="@Vidalia_SOURCE_DIR@\LICENSE-GPLV2" />
-        <File Id="VidaliaLicenseGplV3" DiskId="1"
-              Name="LICENSE-GPLV3" Source="@Vidalia_SOURCE_DIR@\LICENSE-GPLV3" />
-        <File Id="VidaliaLicenseLgplV3" DiskId="1"
-              Name="LICENSE-LGPLV3" Source="@Vidalia_SOURCE_DIR@\LICENSE-LGPLV3" />
-        <File Id="VidaliaLicenseOpenSSL" DiskId="1"
-              Name="LICENSE-OPENSSL" Source="@Vidalia_SOURCE_DIR@\LICENSE-OPENSSL" />
-      </Component>
+          <!-- Qt-related library files -->
+          <Component Id="QtLibrary" Guid="$(var.CurrQtLibsGUID)">
+            <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
+              <RegistryValue Name="QtLibrary" Value="1" Type="integer" KeyPath="yes" />
+            </RegistryKey>
+            <File Id="QtCore4Dll" DiskId="1"
+                  Name="QtCore4.dll" Source="bin\QtCore4.dll" />
+            <File Id="QtGui4Dll" DiskId="1"
+                  Name="QtGui4.dll" Source="bin\QtGui4.dll" />
+            <File Id="QtNetwork4Dll" DiskId="1"
+                  Name="QtNetwork4.dll" Source="bin\QtNetwork4.dll" />
+            <File Id="QtXml4Dll" DiskId="1"
+                  Name="QtXml4.dll" Source="bin\QtXml4.dll" />
+            <File Id="QtSvg4Dll" DiskId="1"
+                  Name="QtSvg4.dll" Source="bin\QtSvg4.dll" />
+<?ifndef NOMARBLE ?>
+            <File Id="MarbleQtWidgetDll" DiskId="1"
+              Name="libmarblewidget.dll" Source="bin/libmarblewidget.dll" />
+<?endif ?>
+          </Component>
 
-      <!-- Qt-related library files -->
-      <Component Id="QtLibrary" Guid="$(var.QtLibraryGuid)">
-        <File Id="QtCore4Dll" DiskId="1"
-              Name="QtCore4.dll" Source="@QT_BINARY_DIR@\QtCore4.dll" />
-        <File Id="QtGui4Dll" DiskId="1"
-              Name="QtGui4.dll" Source="@QT_BINARY_DIR@\QtGui4.dll" />
-        <File Id="QtNetwork4Dll" DiskId="1"
-              Name="QtNetwork4.dll" Source="@QT_BINARY_DIR@\QtNetwork4.dll" />
-        <File Id="QtXml4Dll" DiskId="1"
-              Name="QtXml4.dll" Source="@QT_BINARY_DIR@\QtXml4.dll" />
-        <File Id="QtSvg4Dll" DiskId="1"
-              Name="QtSvg4.dll" Source="@QT_BINARY_DIR@\QtSvg4.dll" />
-      </Component>
+          <!-- MinGW-related library files -->
+          <Component Id="MinGWLibrary" Guid="$(var.CurrMingwLibsGUID)">
+            <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
+              <RegistryValue Name="MinGWLibrary" Value="1" Type="integer" KeyPath="yes" />
+            </RegistryKey>
+            <File Id="MinGWDll" DiskId="1"
+                  Name="mingwm10.dll" Source="bin\mingwm10.dll" />
+            <File Id="gnurxdll" DiskId="1"
+                  Name="libgnurx-0.dll" Source="bin\libgnurx-0.dll" />
+          </Component>
 
-      <!-- MinGW-related library files -->
-      <Component Id="MinGWLibrary" Guid="$(var.MinGWLibraryGuid)">
-        <File Id="MinGWDll" DiskId="1"
-              Name="mingwm10.dll" Source="@MINGW_BINARY_DIR@\mingwm10.dll" />
-      </Component>
+          <!-- OpenSSL-related library files -->
+          <Component Id="OpenSSLLibrary" Guid="$(var.CurrCryptoLibsGUID)">
+            <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
+              <RegistryValue Name="OpenSSLLibrary" Value="1" Type="integer" KeyPath="yes" />
+            </RegistryKey>
+            <File Id="ssleay32dll" DiskId="1"
+                  Name="ssleay32-0.9.8.dll" Source="bin\ssleay32-0.9.8.dll" />
+            <File Id="cryptoeay32dll" DiskId="1"
+                  Name="cryptoeay32-0.9.8.dll" Source="bin\cryptoeay32-0.9.8.dll" />
+            <File Id="zlibdll" DiskId="1"
+                  Name="zlib1.dll" Source="bin\zlib1.dll" />
+          </Component>
 
-      <!-- OpenSSL-related library files -->
-      <Component Id="OpenSSLLibrary" Guid="$(var.OpenSSLLibraryGuid)">
-        <File Id="ssleay32dll" DiskId="1"
-              Name="ssleay32.dll" Source="@OPENSSL_BINARY_DIR@\ssleay32.dll" />
-      </Component>
-      
-      <!-- Marble-related library files -->
-      <Component Id="MarbleWidgetLibrary" Guid="$(var.MarbleWidgetLibraryGuid)">
-        <File Id="MarbleWidgetDll" DiskId="1"
-              Name="libmarblewidget.dll" Source="@MARBLEWIDGET_LIBRARY@" />
-      </Component>
-    </DirectoryRef>
+          <!-- Place this here until argument parsing with quoted escapes works as expected. -->
+          <Component Id="PolipoConfig" Guid="$(var.CurrPolipoConfigGUID)">
+            <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
+              <RegistryValue Name="PolipoConfigFile" Value="1" Type="integer" KeyPath="yes" />
+            </RegistryKey>
+            <File
+              Id="PolipoConfigFile"
+              Name="polipocfg.txt"
+              Source="pkg/win32/polipo.conf"
+              Vital="yes"
+              ReadOnly="no"
+              DiskId="1"
+            />
+          </Component>
 
-    <!-- Qt-related plugin files -->
-    <DirectoryRef Id="QtImageFormatPluginsDir">
-      <Component Id="QtImageFormatPlugins" Guid="$(var.QtImageFormatPluginsGuid)">
-        <File Id="QJpeg4Dll" DiskId="1"
-              Name="qjpeg4.dll" Source="@QT_PLUGINS_DIR@\imageformats\qjpeg4.dll" />
-      </Component>
-    </DirectoryRef>
+         </Directory>
+        </Directory>
 
-    <!-- Marble-related plugin files -->
-    <DirectoryRef Id="MarblePluginsDir">
-      <Component Id="MarblePlugins" Guid="$(var.MarblePluginsGuid)">
-        <File Id="MarbleOverviewMapPlugin" DiskId="1"
-              Name="libMarbleOverviewMap.dll" Source="@MARBLE_OVERVIEWMAP_PLUGIN@" />
-        <File Id="MarbleStarsPlugin" DiskId="1"
-              Name="libMarbleStarsPlugin.dll" Source="@MARBLE_STARS_PLUGIN@" />
-      </Component>
-    </DirectoryRef>
-          
-    <!-- Marble-related data files -->
-    <DirectoryRef Id="MarbleDataDir">
-      <Component Id="MarbleLegendsData" Guid="$(var.MarbleLegendsDataGuid)">
-        <File Id="LandColorsLegend" DiskId="1"
-              Name="landcolors.leg" Source="@MARBLE_DATA_DIR@\landcolors.leg" />
-        <File Id="SeaColorsLegend" DiskId="1"
-              Name="seacolors.leg" Source="@MARBLE_DATA_DIR@\seacolors.leg" />
-      </Component>
-    </DirectoryRef>
-    <DirectoryRef Id="MarbleBlueMarbleDataDir">
-      <Component Id="MarbleBlueMarbleData" Guid="$(var.MarbleBlueMarbleDataGuid)">
-        <File Id="MarbleBlueMarbleDgml" DiskId="1"
-              Name="bluemarble.dgml" Source="@MARBLE_DATA_DIR@\maps\earth\bluemarble\bluemarble.dgml" />
-      </Component>
-    </DirectoryRef>
-    <DirectoryRef Id="MarbleCityLightsDataDir">
-      <Component Id="MarbleCityLightsData" Guid="$(var.MarbleCityLightsDataGuid)">
-        <File Id="MarbleCityLightsDgml" DiskId="1"
-              Name="citylights.dgml" Source="@MARBLE_DATA_DIR@\maps\earth\citylights\citylights.dgml" />
-      </Component>
-    </DirectoryRef>
-    <DirectoryRef Id="MarbleSrtmDataDir">
-      <Component Id="MarbleSrtmData" Guid="$(var.MarbleSrtmDataGuid)">
-        <File Id="MarbleSrtmDgml" DiskId="1"
-              Name="srtm.dgml" Source="@MARBLE_DATA_DIR@\maps\earth\srtm\srtm.dgml" />
-        <File Id="MarbleSrtmJpg" DiskId="1"
-              Name="srtm.jpg" Source="@MARBLE_DATA_DIR@\maps\earth\srtm\srtm.jpg" />
-      </Component>
-    </DirectoryRef>
-    <DirectoryRef Id="MarbleMwdbiiDir">
-      <Component Id="MarbleMwdbiiData" Guid="$(var.MarbleMwdbiiDataGuid)">
-        <File Id="DatelinePnt" DiskId="1"
-              Name="DATELINE.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\DATELINE.PNT" />
-        <File Id="PAustPnt" DiskId="1"
-              Name="PAUST.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PAUST.PNT" />
-        <File Id="PBorderPnt" DiskId="1"
-              Name="PBORDER.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PBORDER.PNT" />
-        <File Id="PCanProvPnt" DiskId="1"
-              Name="PCANPROV.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PCANPROV.PNT" />
-        <File Id="PCoastPnt" DiskId="1"
-              Name="PCOAST.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PCOAST.PNT" />
-        <File Id="PDiffBorderPnt" DiskId="1"
-              Name="PDIFFBORDER.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PDIFFBORDER.PNT" />
-        <File Id="PGlacierPnt" DiskId="1"
-              Name="PGLACIER.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PGLACIER.PNT" />
-        <File Id="PIslandPnt" DiskId="1"
-              Name="PISLAND.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PISLAND.PNT" />
-        <File Id="PLakePnt" DiskId="1"
-              Name="PLAKE.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PLAKE.PNT" />
-        <File Id="PLakeIslandPnt" DiskId="1"
-              Name="PLAKEISLAND.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PLAKEISLAND.PNT" />
-        <File Id="PMexicoPnt" DiskId="1"
-              Name="PMEXICO.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PMEXICO.PNT" />
-        <File Id="PUsa48DiffPnt" DiskId="1"
-              Name="PUSA48.DIFF.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PUSA48.DIFF.PNT" />
-        <File Id="PUsa48Pnt" DiskId="1"
-              Name="PUSA48.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\PUSA48.PNT" />
-        <File Id="RiverPnt" DiskId="1"
-              Name="RIVER.PNT" Source="@MARBLE_DATA_DIR@\mwdbii\RIVER.PNT" />
-      </Component>
-    </DirectoryRef>
-    <DirectoryRef Id="MarblePlacemarkDataDir">
-      <Component Id="MarblePlacemarkData" Guid="$(var.MarblePlacemarkDataGuid)">
-        <File Id="BasePlacemarksCache" DiskId="1"
-              Name="baseplacemarks.cache" Source="@MARBLE_DATA_DIR@\placemarks\baseplacemarks.cache" />
-        <File Id="BoundaryPlacemarksCache" DiskId="1"
-              Name="boundaryplacemarks.cache" Source="@MARBLE_DATA_DIR@\placemarks\boundaryplacemarks.cache" />
-        <File Id="ElevPlacemarksCache" DiskId="1"
-              Name="elevplacemarks.cache" Source="@MARBLE_DATA_DIR@\placemarks\elevplacemarks.cache" />
-      </Component>
-    </DirectoryRef>
-    <DirectoryRef Id="MarbleStarsDataDir">
-      <Component Id="MarbleStarsData" Guid="$(var.MarbleStarsDataGuid)">
-        <File Id="StarsDat" DiskId="1"
-              Name="stars.dat" Source="@MARBLE_DATA_DIR@\stars\stars.dat" />
-      </Component>
-    </DirectoryRef>
-    <DirectoryRef Id="MarbleSvgDataDir">
-      <Component Id="MarbleSvgData" Guid="$(var.MarbleSvgDataGuid)">
-        <File Id="WorldMapSvg" DiskId="1"
-              Name="worldmap.svg" Source="@MARBLE_DATA_DIR@\svg\worldmap.svg" />
-      </Component>
-    </DirectoryRef>
-    <ComponentGroup Id="MarbleData">
-      <ComponentRef Id="MarbleLegendsData" />
-      <ComponentRef Id="MarbleBlueMarbleData" />
-      <ComponentRef Id="MarbleCityLightsData" />
-      <ComponentRef Id="MarbleSrtmData" />
-      <ComponentRef Id="MarbleMwdbiiData" />
-      <ComponentRef Id="MarblePlacemarkData" />
-      <ComponentRef Id="MarbleStarsData" />
-      <ComponentRef Id="MarbleSvgData" />
-    </ComponentGroup>
+        <Directory Id="INSTALLDIR" Name="Vidalia">
+          <Component Id="GeoIPCache" Guid="$(var.CurrGeoIPCacheGUID)">
+            <CreateFolder/>
+            <RemoveFolder Id="RemoveINSTALLDIR" On="uninstall" />
+            <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
+              <RegistryValue Name="GeoIPCacheFile" Value="1" Type="integer" KeyPath="yes" />
+            </RegistryKey>
+            <File
+              Id="GeoIPCacheFile"
+              Name="geoip-cache"
+              Source="pkg/geoip-cache"
+              Vital="no"
+              ReadOnly="no"
+              DiskId="1"
+            /> 
+          </Component>
+<?ifndef NOMARBLE ?>
+          <Directory Id="LocalPluginsDir" Name="plugins">
+            <!-- Marble plugin library file -->
+            <Component Id="MarblePlugin" Guid="$(var.CurrMarblePluginGUID)">
+              <CreateFolder/>
+              <RemoveFolder Id="RemoveLocalPluginsDir" On="uninstall" />
+              <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
+                <RegistryValue Name="MarblePluginLibrary" Value="1" Type="integer" KeyPath="yes" />
+              </RegistryKey>
+              <File Id="MarbleOverview.dll" DiskId="1"
+                Name="libMarbleOverviewMap.dll" Source="bin/libMarbleOverviewMap.dll" />
+              <File Id="MarbleStars.dll" DiskId="1"
+                Name="libMarbleStarsPlugin.dll" Source="bin/libMarbleStarsPlugin.dll" />
+              <File Id="CompassFloat.dll" DiskId="1"
+                Name="libCompassFloatItem.dll" Source="bin/libCompassFloatItem.dll" />
+              <File Id="MapScaleFloat.dll" DiskId="1"
+                Name="libMapScaleFloatItem.dll" Source="bin/libMapScaleFloatItem.dll" />
+              <File Id="MarbleCrosshairs.dll" DiskId="1"
+                Name="libMarbleCrosshairsPlugin.dll" Source="bin/libMarbleCrosshairsPlugin.dll" />
+              <File Id="MarbleGeoData.dll" DiskId="1"
+                Name="libMarbleGeoDataPlugin.dll" Source="bin/libMarbleGeoDataPlugin.dll" />
+              <File Id="NavigationFloat.dll" DiskId="1"
+                Name="libNavigationFloatItem.dll" Source="bin/libNavigationFloatItem.dll" />
+            </Component>
+            <Directory Id="LocalPluginsDataDir" Name="data">
+              <Component Id="PluginDataDir" Guid="$(var.CurrPluginDataDirGUID)">
+                <CreateFolder/>
+                <RemoveFolder Id="RemoveLocalPluginsDataDir" On="uninstall" />
+                <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
+                  <RegistryValue Name="PluginDataDir" Value="1" Type="integer" KeyPath="yes" />
+                </RegistryKey>
+              </Component>
+            </Directory>
+            <Directory Id="LocalPluginsImageFormatsDir" Name="imageformats">
+              <Component Id="PluginImageFormatsDir" Guid="$(var.CurrPluginImageFormatsGUID)">
+                <CreateFolder/>
+                <RemoveFolder Id="RemoveLocalPluginsImageFormatsDir" On="uninstall" />
+                <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
+                  <RegistryValue Name="PluginImageFormatsDir" Value="1" Type="integer" KeyPath="yes" />
+                </RegistryKey>
+                <File Id="qsvg4.dll" DiskId="1"
+                  Name="qsvg4.dll" Source="plugins/imageformats/qsvg4.dll" />
+                <File Id="qjpeg4.dll" DiskId="1"
+                  Name="qjpeg4.dll" Source="plugins/imageformats/qjpeg4.dll" />
+              </Component>
+            </Directory>
+          </Directory>
+<?endif ?>
+        </Directory>
+      </Directory>
 
-    <!-- Application shortcuts and menu items -->
-    <DirectoryRef Id="TARGETDIR">
       <Directory Id="ProgramMenuFolder" Name="Programs">
         <Directory Id="ShortcutFolder" Name="Vidalia">
-          <Component Id="AddVidaliaToStartMenu" Guid="0F2CEE2C-8730-432e-8A8F-E49AF78AF28C">
+          <Component Id="AddVidaliaToStartMenu" Guid="$(var.CurrStartMenuGUID)">
+            <Condition><![CDATA[NOSC <> 1]]> </Condition>
             <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
               <RegistryValue Name="StartMenuShortcut" Value="1" Type="integer" KeyPath="yes" />
             </RegistryKey>
             <Shortcut Id="VidaliaStartMenuShortcut"
-                      Name="Vidalia" Target="[INSTALLDIR]vidalia.exe"
-                      Directory="ShortcutFolder" WorkingDirectory="INSTALLDIR"
+                      Name="Vidalia" Target="[LocalProgramsInstDir]vidalia.exe"
+                      Directory="ShortcutFolder" WorkingDirectory="LocalProgramsInstDir"
                       Icon="vidalia.ico" IconIndex="0" />
+<?ifndef NOMARBLE ?>
+            <Shortcut Id="VidaliaMarbleStartMenuShortcut"
+                      Name="Vidalia Marble" Target="[LocalProgramsInstDir]vidalia-marble.exe"
+                      Directory="ShortcutFolder" WorkingDirectory="LocalProgramsInstDir"
+                      Icon="vidalia.ico" IconIndex="0" />
+<?endif ?>
             <RemoveFolder Id="RemoveShortcutFolder" On="uninstall" />
           </Component>
         </Directory>
       </Directory>
 
       <Directory Id="DesktopFolder" Name="Desktop">
-        <Component Id="AddVidaliaToDesktop" Guid="A7688EE5-4EDE-4429-A2D9-C8B9BD85AB5A">
+        <Component Id="AddVidaliaToDesktop" Guid="$(var.CurrDesktopGUID)">
+          <Condition><![CDATA[NOSC <> 1]]> </Condition>
           <RegistryKey Root="HKCU" Key="Software\Vidalia" Action="createAndRemoveOnUninstall">
             <RegistryValue Name="DesktopShortcut" Value="1" Type="integer" KeyPath="yes" />
           </RegistryKey>
           <Shortcut Id="VidaliaDesktopShortcut"
-                    Name="Vidalia" Target="[INSTALLDIR]vidalia.exe"
-                    Directory="DesktopFolder" WorkingDirectory="INSTALLDIR"
+                    Name="Vidalia" Target="[LocalProgramsInstDir]vidalia.exe"
+                    Directory="DesktopFolder" WorkingDirectory="LocalProgramsInstDir"
+                    Icon="vidalia.ico" IconIndex="0" />
+<?ifndef NOMARBLE ?>
+          <Shortcut Id="VidaliaMarbleDesktopShortcut"
+                    Name="Vidalia Marble" Target="[LocalProgramsInstDir]vidalia-marble.exe"
+                    Directory="DesktopFolder" WorkingDirectory="LocalProgramsInstDir"
                     Icon="vidalia.ico" IconIndex="0" />
+<?endif ?>
         </Component>
       </Directory>
 
-      <Component Id="AddToStartupItems" Guid="E7BC3F3C-86BA-4a08-966C-F3F8D8CB3AF4">
+      <Component Id="AddToStartupItems" Guid="$(var.CurrStartupGUID)">
+        <Condition><![CDATA[NOSC <> 1]]> </Condition>
         <RegistryKey Root="HKCU"
                      Key="Software\Microsoft\Windows\CurrentVersion\Run"
                      Action="createAndRemoveOnUninstall">
-          <RegistryValue Name="Vidalia" Value='"[INSTALLDIR]vidalia.exe"' Type="string" />
+          <RegistryValue Name="Vidalia" Value='"[LocalProgramsInstDir]vidalia.exe"' Type="string" />
         </RegistryKey>
       </Component>
-    </DirectoryRef>
+    </Directory>
 
     <!-- Build up the feature hierarchy -->
     <Feature Id="Complete" Title="Vidalia"
              Level="1" Display="expand" ConfigurableDirectory="INSTALLDIR"
-             Description="Vidalia is application that helps you control, monitor, and configure the Tor software.">
-      <Feature Id="MainApplication" Title="Vidalia @VERSION@"
+             Description="!(loc.VidaliaAppDesc)">
+      <Feature Id="MainApplication" Title="Vidalia $(var.ThisProductVersionDisp)"
                AllowAdvertise="no" Absent="disallow" Level="1"
                Description="Main application">
+        <ComponentRef Id="LocalProgramsFolderRef" />
         <ComponentRef Id="VidaliaExecutable" />
-        <ComponentRef Id="VidaliaDocuments" />
         <ComponentRef Id="QtLibrary" />
-        <ComponentRef Id="QtImageFormatPlugins" />
         <ComponentRef Id="MinGWLibrary" />
         <ComponentRef Id="OpenSSLLibrary" />
-        <ComponentRef Id="MarbleWidgetLibrary" />
-        <ComponentRef Id="MarblePlugins" />
-        <ComponentGroupRef Id="MarbleData"/>
+        <ComponentRef Id="GeoIPCache" />
+        <ComponentRef Id="PolipoConfig" />
+<?ifndef NOMARBLE ?>
+        <ComponentRef Id="MarblePlugin" />
+        <ComponentRef Id="PluginDataDir" />
+        <ComponentRef Id="PluginImageFormatsDir" />
+<?endif ?>
       </Feature>
       <Feature Id="Shortcuts" Title="Shortcuts"
                AllowAdvertise="no" Absent="allow" Level="1"
-               Description="Add a shortcut to Vidalia to your Start menu or Desktop.">
+               Description="!(loc.VidaliaShortcutsDesc)">
         <Feature Id="StartMenuShortcuts" Title="Add to Start menu"
                  AllowAdvertise="no" Absent="allow" Level="1"
-                 Description="Add Vidalia to your Start menu">
+                 Description="!(loc.VidaliaShortcutsDesc)">
           <ComponentRef Id="AddVidaliaToStartMenu" />
         </Feature>
         <Feature Id="DesktopShortcuts" Title="Add to Desktop"
                  AllowAdvertise="no" Absent="allow" Level="1"
-                 Description="Add Vidalia to your Desktop">
+                 Description="!(loc.VidaliaShortcutsDesc)">
           <ComponentRef Id="AddVidaliaToDesktop" />
         </Feature>
         <Feature Id="RunAtStartup" Title="Run at Startup"
                  AllowAdvertise="no" Absent="allow" Level="1"
-                 Description="Run Vidalia automatically when your system starts">
+                 Description="!(loc.VidaliaStartupDesc)">
           <ComponentRef Id="AddToStartupItems" />
         </Feature>
       </Feature>
     </Feature>
 
-    <!-- Upgrade installation sequence -->
+    <!-- Upgrade installation sequence. -->
     <InstallExecuteSequence>
       <RemoveExistingProducts After="InstallValidate" />
     </InstallExecuteSequence>
 
     <!-- Set the UI options -->
     <UIRef Id="WixUI_Custom" />
-    <Icon Id="vidalia.ico" SourceFile="@Vidalia_SOURCE_DIR@\src\vidalia\res\icons\vidalia.ico" />
-    <WixVariable Id="WixUIBannerBmp" Value="@Vidalia_SOURCE_DIR@\pkg\win32\msi-header.bmp" />
-    <WixVariable Id="WixUIDialogBmp" Value="@Vidalia_SOURCE_DIR@\pkg\win32\msi-welcome.bmp" />
+    <Icon Id="vidalia.ico" SourceFile="src\vidalia\res\icons\vidalia.ico" />
+    <WixVariable Id="WixUIBannerBmp" Value="pkg\win32\msi-header.bmp" />
+    <WixVariable Id="WixUIDialogBmp" Value="pkg\win32\msi-welcome.bmp" />
   </Product>
 </Wix>
diff -Naur a/src/common/win32.cpp b/src/common/win32.cpp
--- a/src/common/win32.cpp	2009-02-16 22:53:13.437184000 +0000
+++ b/src/common/win32.cpp	2009-03-07 03:57:41.691104680 +0000
@@ -67,16 +67,20 @@
 QString
 win32_program_files_folder()
 {
-  return win32_get_folder_location(
-     CSIDL_PROGRAM_FILES, QDir::rootPath() + "\\Program Files");
+  QString local_appdata = win32_get_folder_location(CSIDL_LOCAL_APPDATA, "");
+  if (local_appdata != "")
+    return local_appdata + "\\Programs";
+  return win32_get_folder_location(CSIDL_PROGRAM_FILES, QDir::rootPath() + "\\Program Files");
 }
 
 /** Gets the location of the user's %APPDATA% folder. */
 QString
 win32_app_data_folder()
 {
-  return win32_get_folder_location(
-      CSIDL_APPDATA, QDir::homePath() + "\\Application Data");
+  QString local_appdata = win32_get_folder_location(CSIDL_LOCAL_APPDATA, "");
+  if (local_appdata != "")
+    return local_appdata;
+  return win32_get_folder_location(CSIDL_APPDATA, QDir::homePath() + "\\Application Data");
 }
 
 /** Returns the value in keyName at keyLocation. 
diff -Naur a/src/tools/CMakeLists.txt b/src/tools/CMakeLists.txt
--- a/src/tools/CMakeLists.txt	2009-02-27 21:08:55.152739000 +0000
+++ b/src/tools/CMakeLists.txt	2009-03-07 02:42:35.594135000 +0000
@@ -17,5 +17,6 @@
   add_subdirectory(po2nsh)
   add_subdirectory(nsh2po EXCLUDE_FROM_ALL)
   add_subdirectory(po2wxl)
+  add_subdirectory(wixtool)
 endif(WIN32)
 
diff -Naur a/src/tools/po2wxl/po2wxl.cpp b/src/tools/po2wxl/po2wxl.cpp
--- a/src/tools/po2wxl/po2wxl.cpp	2009-03-01 07:55:10.500878000 +0000
+++ b/src/tools/po2wxl/po2wxl.cpp	2009-03-07 03:57:41.692104528 +0000
@@ -19,9 +19,49 @@
 #define WXL_NAMESPACE                  "http://schemas.microsoft.com/wix/2006/localization"
 #define WXL_ELEMENT_ROOT               "WixLocalization"
 #define WXL_ELEMENT_MESSAGE            "String"
+#define WXL_ATTR_LANGUAGE              "LCID"
 #define WXL_ATTR_MESSAGE_ID            "Id"
 #define WXL_ATTR_TRANSLATION_TYPE      "Culture"
-#define WXL_ATTR_OVERRIDABLE           "Overridable"
+
+/** We need to provide an element with the LCID for this locale 
+ * that is used in the WiX Product definition. */
+QString
+culture_lcid(const QString &culture)
+{
+  /* For now character encoding focused, not generally locale / dialect aware. */
+  QString lcid = "0";
+  if(!culture.compare("en", Qt::CaseInsensitive)) 
+    lcid = "1033";
+  else if(!culture.compare("cs", Qt::CaseInsensitive)) 
+    lcid = "1029";
+  else if(!culture.compare("de", Qt::CaseInsensitive)) 
+    lcid = "1031";
+  else if(!culture.compare("es", Qt::CaseInsensitive)) 
+    lcid = "1034";
+  else if(!culture.compare("fa", Qt::CaseInsensitive)) 
+    lcid = "1065";
+  else if(!culture.compare("fi", Qt::CaseInsensitive)) 
+    lcid = "1035";
+  else if(!culture.compare("fr", Qt::CaseInsensitive)) 
+    lcid = "1036";
+  else if(!culture.compare("he", Qt::CaseInsensitive)) 
+    lcid = "1037";
+  else if(!culture.compare("it", Qt::CaseInsensitive)) 
+    lcid = "1040";
+  else if(!culture.compare("nl", Qt::CaseInsensitive)) 
+    lcid = "1043";
+  else if(!culture.compare("pl", Qt::CaseInsensitive)) 
+    lcid = "1045";
+  else if(!culture.compare("pt", Qt::CaseInsensitive)) 
+    lcid = "1046";
+  else if(!culture.compare("ro", Qt::CaseInsensitive)) 
+    lcid = "1048";
+  else if(!culture.compare("ru", Qt::CaseInsensitive)) 
+    lcid = "1049";
+  else if(!culture.compare("sv", Qt::CaseInsensitive)) 
+    lcid = "1053";
+  return lcid;
+}
 
 /** Create a new message string element using the source string <b>msgid</b>
  * and the translation <b>msgstr</b> and assign identifier attribute. */
@@ -33,11 +73,6 @@
 
   message = wxl->createElement(WXL_ELEMENT_MESSAGE);
   message.setAttribute(WXL_ATTR_MESSAGE_ID, strid);
-
-  /* Always allow localized string to be dynamic. This is required for
-   * multi-language packages to link correctly.
-   */
-  message.setAttribute(WXL_ATTR_OVERRIDABLE, "yes");
   if (!msgstr.isEmpty())
     message.appendChild(wxl->createTextNode(msgstr));
   else
@@ -146,7 +181,12 @@
   Q_ASSERT(errorMessage);
 
   *wxl = new_wxl_document(culture);
-  
+
+  /* Set the LCID to Language code for use as !(loc.LCID) in Product. */
+  QString lcid = culture_lcid(culture); 
+  wxl->documentElement().appendChild(
+    new_message_element(wxl, WXL_ATTR_LANGUAGE, lcid, lcid)); 
+
   skip_po_header(po);
   line = read_next_line(po);
   while (!po->atEnd()) {
diff -Naur a/src/tools/wixtool/CMakeLists.txt b/src/tools/wixtool/CMakeLists.txt
--- a/src/tools/wixtool/CMakeLists.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/src/tools/wixtool/CMakeLists.txt	2009-03-07 02:42:35.595135000 +0000
@@ -0,0 +1,28 @@
+##
+##  $Id$
+## 
+##  This file is part of Vidalia, and is subject to the license terms in the
+##  LICENSE file, found in the top level directory of this distribution. If 
+##  you did not receive the LICENSE file with this file, you may obtain it
+##  from the Vidalia source package distributed by the Vidalia Project at
+##  http://www.vidalia-project.net/. No part of Vidalia, including this file,
+##  may be copied, modified, propagated, or distributed except according to
+##  the terms described in the LICENSE file.
+##
+
+## wixtool source files
+set(wixtool_SRCS
+  wixtool.cpp
+)
+
+## Create the wixtool executable
+add_executable(wixtool ${wixtool_SRCS})
+
+## Link the executable with the appropriate Qt libraries
+target_link_libraries(wixtool ${QT_LIBRARIES})
+
+## Remember location so we can use it in custom commands
+get_target_property(WIXTOOL_EXECUTABLE wixtool LOCATION)
+set(VIDALIA_WIXTOOL_EXECUTABLE ${WIXTOOL_EXECUTABLE}
+    CACHE STRING "Location of Vidalia's wixtool program." FORCE)
+
diff -Naur a/src/tools/wixtool/wixtool.cpp b/src/tools/wixtool/wixtool.cpp
--- a/src/tools/wixtool/wixtool.cpp	1970-01-01 00:00:00.000000000 +0000
+++ b/src/tools/wixtool/wixtool.cpp	2009-03-10 08:52:45.590313000 +0000
@@ -0,0 +1,687 @@
+/*
+**  $Id$
+**
+**  This file is part of Vidalia, and is subject to the license terms in the
+**  LICENSE file, found in the top level directory of this distribution. If you
+**  did not receive the LICENSE file with this file, you may obtain it from the
+**  Vidalia source package distributed by the Vidalia Project at
+**  http://www.vidalia-project.net/. No part of Vidalia, including this file,
+**  may be copied, modified, propagated, or distributed except according to the
+**  terms described in the LICENSE file.
+*/
+
+#include <QFile>
+#include <QDomDocument>
+#include <QTextStream>
+#include <QTextCodec>
+#include <QStringList>
+#include <stdlib.h>
+
+#define WIX_ATTR_ID  "Id"
+#define WIX_ATTR_DIRACTION "uninstall"
+#define WIX_ATTR_REGACTION "createAndRemoveOnUninstall"
+#define WIX_ATTR_VALUE "Value"
+#define WIX_ATTR_KEY "KeyPath"
+#define WIX_ATTR_GUID "Guid"
+#define WIX_ATTR_NAME "Name"
+#define WIX_ATTR_REG_TYPE "Type"
+#define WIX_ATTR_REG_NAME "Name"
+#define WIX_ATTR_REG_ROOT "Root"
+#define WIX_ATTR_REG_KEYPATH  "Key"
+#define WIX_ATTR_REG_ACTION  "Action"
+#define WIX_REG_KEY_TYPE "integer"
+#define WIX_TAG_FILE "File"
+#define WIX_TAG_DIR "Directory"
+#define WIX_TAG_FEATURE "Feature"
+#define WIX_TAG_COMPONENT "Component"
+#define WIX_TAG_COMPONENT_REF "ComponentRef"
+#define WIX_TAG_CREATEDIR "CreateFolder"
+#define WIX_TAG_REMOVEDIR "RemoveFolder"
+#define WIX_TAG_REGKEY "RegistryKey"
+#define WIX_TAG_REGVAL "RegistryValue"
+
+typedef void (*TraverseCallback)(void *cbdata, QDomElement e);
+
+typedef struct s_SpliceData {
+  QString      dtag;
+  QString      did;
+  QDomElement  splice;
+} SpliceData;
+
+typedef struct s_ReplaceData {
+  QString  dtag;
+  QString  did;
+  QString  dprop;
+  QString  newtag;
+  QString  newprop;
+  QString  newpropval;
+} ReplaceData;
+
+typedef struct s_AddData {
+  QString  dtag;
+  QString  did;
+  QString  newtag;
+  QString  newprop;
+  QString  newpropval;
+} AddData;
+
+typedef struct s_UserLocalData {
+  QString      keypath;
+  QString      featureid;
+  QStringList  newcomps;
+} UserLocalData;
+
+bool
+do_walkdoc(QDomNode  n,
+  TraverseCallback  cb,
+  void *            cbdata,
+  QString *errorMessage)
+{
+  QTextStream error(stderr);
+  if ( !n.isNull() ) {
+    if ( n.isElement() ) {
+      QDomElement e = n.toElement();
+      (*cb)(cbdata, e);
+    }
+    if ( n.hasChildNodes() ) {
+      QDomNodeList subnodes = n.childNodes();
+      int i = 0;
+      while (i < subnodes.count()) {
+        do_walkdoc(subnodes.item(i++), cb, cbdata, errorMessage);
+      }
+    }
+  }
+  return true;
+}
+
+bool
+walkdoc(QDomDocument *doc,
+  TraverseCallback  cb,
+  void *            cbdata,
+  QString *errorMessage)
+{
+  QTextStream error(stderr);
+  QDomNode n = doc->documentElement();
+  do_walkdoc(n, cb, cbdata, errorMessage);
+  return true;
+}
+
+void 
+splicefunc(void *cbdata,
+ QDomElement e)
+{
+  SpliceData *d = reinterpret_cast<SpliceData *>(cbdata);
+  QString eid = e.attribute(WIX_ATTR_ID);
+
+  if (e.tagName().compare(d->dtag) == 0) {
+    /* if a specific Id is set, verify it too. */
+    if (d->did.isEmpty() ||
+        (eid.size() && !eid.compare(d->did)) ) {
+
+      /* expected behavior is to graft children of the splice under target.
+       * if we're only given a single element graft it instead.
+       */
+      if (d->splice.hasChildNodes()) {
+        QDomNodeList subnodes = d->splice.childNodes();
+        int i = 0;
+        while (i < subnodes.count()) {
+          e.appendChild(e.ownerDocument().importNode(subnodes.item(i++), true));
+        }
+      }
+      else {
+        e.appendChild(e.ownerDocument().importNode(d->splice, true));
+      }
+    }
+  }
+}
+
+/** Make modifications to requested documents.
+ * returns false on error and <b>errorMessage</b> will be set.
+ */
+bool
+docsplice(QDomDocument *doc,
+  QString arguments,
+  QString *errorMessage)
+{
+  Q_ASSERT(doc);
+  Q_ASSERT(errorMessage);
+  SpliceData  cbdata;
+
+  QStringList spliceinfo = arguments.split("=");
+  if (spliceinfo.count() != 2) {
+    *errorMessage = "Invalid argument for splice command: " + arguments;
+    return false;
+  }
+  if (spliceinfo[0].contains(':')) {
+    /* Id syntax */
+    QStringList destinfo = spliceinfo[0].split(":");
+    cbdata.dtag = destinfo[0];
+    cbdata.did  = destinfo[1];
+  }
+  else {
+    cbdata.dtag = spliceinfo[0];
+  }
+
+  QStringList  srcinfo = spliceinfo[1].split(":");
+  if (srcinfo.count() < 2) {
+    *errorMessage = "Invalid source argument for splice command: " + arguments;
+    return false;
+  }
+  QFile spliceFile(srcinfo[0]);
+  if (!spliceFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
+    *errorMessage = QString("Unable to open '%1' for reading: %2\n")
+                     .arg(srcinfo[0]).arg(spliceFile.errorString());
+    return false;
+  }
+  QTextStream sfiletxt(&spliceFile);
+  QDomDocument sdoc;
+  QString parseError;
+  int  badline, badcol;
+  if (!sdoc.setContent (sfiletxt.readAll(), false, &parseError, &badline, &badcol)) {
+    *errorMessage = QString("Error parsing splice document '%1' at line %2 and column %3: %4")
+                    .arg(srcinfo[0]).arg(badline).arg(badcol).arg(parseError);
+    return false;
+  }
+
+  QDomNodeList elist = sdoc.elementsByTagName(srcinfo[1]);
+  if (elist.count() == 0) {
+    *errorMessage = QString("Unable to locate splice element '%1' in document.\n").arg(srcinfo[1]);
+    return false;
+  }
+  if (srcinfo.count() == 3) {
+    /* Id syntax for source elem */
+    for (int i=0; i < elist.count(); i++) {
+      QString eid = elist.item(i).toElement().attribute(WIX_ATTR_ID);
+      if (eid.size() && !eid.compare(srcinfo[2])) {
+        cbdata.splice = elist.item(i).toElement();
+      }
+    }
+  }
+  else {
+    /* without an Id the tag name should be unique. */
+    cbdata.splice = elist.item(0).toElement();
+  }
+  return walkdoc(doc, &splicefunc, &cbdata, errorMessage);
+}
+
+void 
+replacefunc(void *cbdata,
+ QDomElement e)
+{
+  ReplaceData *d = reinterpret_cast<ReplaceData *>(cbdata);
+  QString eid = e.attribute(WIX_ATTR_ID);
+
+  if (e.tagName().compare(d->dtag) == 0) {
+    /* if a specific Id is set, verify it too. */
+    if (d->did.isEmpty() ||
+        (eid.size() && !eid.compare(d->did)) ) {
+
+      /* no destination means remove node from tree */
+      if (d->newtag.isNull()) {
+        QDomNode parent = e.parentNode();
+        parent.removeChild(e);
+      }
+      else {
+        if (d->newtag.compare(e.tagName())) {
+          e.setTagName (d->newtag);
+        }
+        if (d->newprop.isNull()) {
+          /* clear all attributes (except Id if present) */
+          QDomNamedNodeMap attrs = e.attributes();
+          for (int i = 0; i < attrs.count(); i++) {
+            if (attrs.item(i).nodeName().compare(WIX_ATTR_ID)) {
+              e.removeAttribute(attrs.item(i).nodeName());
+            }
+          }
+        }
+        else {
+          /* only modify / clear a specific property */
+          QDomNode prop = e.attributeNode(d->newprop);
+          if (!prop.isNull()) {
+            e.setAttribute(d->newprop, d->newpropval);
+          }
+        }
+      }
+    }
+  }
+}
+
+/** Make modifications to requested documents.
+ * returns false on error and <b>errorMessage</b> will be set.
+ */
+bool
+docreplace(QDomDocument *doc,
+  QString arguments,
+  QString *errorMessage)
+{
+  Q_ASSERT(doc);
+  Q_ASSERT(errorMessage);
+  ReplaceData  cbdata;
+
+  QStringList replaceinfo = arguments.split("=");
+  if (replaceinfo.count() < 1) {
+    *errorMessage = "Invalid argument for replace command: " + arguments;
+    return false;
+  }
+  if (replaceinfo[0].contains(':')) {
+    /* Id syntax */
+    QStringList destinfo = replaceinfo[0].split(":");
+    cbdata.dtag = destinfo[0];
+    cbdata.did  = destinfo[1];
+    if (destinfo.count() >= 3) {
+      cbdata.dprop = destinfo[2];
+    }
+  }
+  else {
+    cbdata.dtag = replaceinfo[0];
+  }
+  if (replaceinfo.count() > 1) {
+    QStringList  srcinfo = replaceinfo[1].split(":");
+    if (srcinfo.count() < 1) {
+      *errorMessage = "Invalid target argument for replace command: " + arguments;
+      return false;
+    }
+    if (srcinfo.count() >= 1) {
+      if (srcinfo[0].length()) cbdata.newtag = srcinfo[0];
+    }
+    if (srcinfo.count() >= 2) {
+      if (srcinfo[1].length()) cbdata.newprop = srcinfo[1];
+    }
+    if (srcinfo.count() >= 3) {
+      if (srcinfo[2].length()) cbdata.newpropval = srcinfo[2];
+    }
+  }
+  return walkdoc(doc, &replacefunc, &cbdata, errorMessage);
+}
+
+void 
+addfunc(void *cbdata,
+ QDomElement e)
+{
+  AddData *d = reinterpret_cast<AddData *>(cbdata);
+  QString eid = e.attribute(WIX_ATTR_ID);
+
+  if (e.tagName().compare(d->dtag) == 0) {
+    /* if a specific Id is set, verify it too. */
+    if (d->did.isEmpty() ||
+        (eid.size() && !eid.compare(d->did)) ) {
+      if (d->newtag.compare(d->dtag)) {
+        QDomElement ne = e.ownerDocument().createElement(d->newtag);
+        if (!d->newprop.isNull()) {
+          ne.setAttribute(d->newprop, d->newpropval);
+        }
+        e.appendChild(ne);
+      }
+      else {
+        e.setAttribute(d->newprop, d->newpropval);
+      }
+    }
+  }
+}
+
+/** Make modifications to requested documents.
+ * returns false on error and <b>errorMessage</b> will be set.
+ */
+bool
+docadd(QDomDocument *doc,
+  QString arguments,
+  QString *errorMessage)
+{
+  Q_ASSERT(doc);
+  Q_ASSERT(errorMessage);
+  AddData  cbdata;
+
+  QStringList addinfo = arguments.split("=");
+  if (addinfo.count() < 1) {
+    *errorMessage = "Invalid argument for add command: " + arguments;
+    return false;
+  }
+  if (addinfo[0].contains(':')) {
+    /* Id syntax */
+    QStringList destinfo = addinfo[0].split(":");
+    cbdata.dtag = destinfo[0];
+    cbdata.did  = destinfo[1];
+  }
+  else {
+    cbdata.dtag = addinfo[0];
+  }
+  if (addinfo.count() > 1) {
+    QStringList  srcinfo = addinfo[1].split(":");
+    if (srcinfo.count() < 1) {
+      *errorMessage = "Invalid target argument for add command: " + arguments;
+      return false;
+    }
+    if (srcinfo.count() >= 1) {
+      if (srcinfo[0].length()) cbdata.newtag = srcinfo[0];
+    }
+    if (srcinfo.count() >= 2) {
+      if (srcinfo[1].length()) cbdata.newprop = srcinfo[1];
+    }
+    if (srcinfo.count() >= 3) {
+      if (srcinfo[2].length()) cbdata.newpropval = srcinfo[2];
+    }
+  }
+  return walkdoc(doc, &addfunc, &cbdata, errorMessage);
+}
+
+bool
+createRegLocalComponent(QDomElement e,
+ QString dirName,
+ QString keyPath)
+{ 
+  QDomElement nrk = e.ownerDocument().createElement(WIX_TAG_REGKEY);
+  QDomElement nrv = e.ownerDocument().createElement(WIX_TAG_REGVAL);
+  nrk.setAttribute(WIX_ATTR_REG_ROOT, "HKCU");
+  nrk.setAttribute(WIX_ATTR_REG_ACTION, "createAndRemoveOnUninstall");
+  nrk.setAttribute(WIX_ATTR_REG_KEYPATH, keyPath);
+  nrv.setAttribute(WIX_ATTR_REG_TYPE, WIX_REG_KEY_TYPE);
+  nrv.setAttribute(WIX_ATTR_REG_NAME, dirName);
+  nrv.setAttribute(WIX_ATTR_VALUE, "1");
+  nrv.setAttribute(WIX_ATTR_KEY, "yes");
+  nrk.appendChild(nrv);
+  e.appendChild(nrk);
+}
+
+bool
+createDirMgmtComponent(QDomElement e,
+ QString dirName)
+{
+  QDomElement nce;
+  /* An empty dir might produce a createdir, so only add if not present. */
+  if (e.elementsByTagName(WIX_TAG_CREATEDIR).count() == 0) {
+    nce = e.ownerDocument().createElement(WIX_TAG_CREATEDIR);
+    e.appendChild(nce);
+  }
+  nce = e.ownerDocument().createElement(WIX_TAG_REMOVEDIR);
+  nce.setAttribute("On", WIX_ATTR_DIRACTION);
+  nce.setAttribute(WIX_ATTR_ID, QString("Remove").append(dirName));
+  e.appendChild(nce);
+}
+
+void
+userlocalfunc(void *cbdata,
+ QDomElement e)
+{
+  UserLocalData *ulinfo = reinterpret_cast<UserLocalData *>(cbdata);
+  QString eid = e.attribute(WIX_ATTR_ID);
+
+  if (e.tagName().compare(WIX_TAG_FILE) == 0) {
+    e.removeAttribute(WIX_ATTR_KEY);
+  }
+  else if (e.tagName().compare(WIX_TAG_COMPONENT) == 0) {
+    /* If the WiX tools get confused we need to remove KeyPath attrs
+     * on any component elements after creation or merging.
+     * Empty directories with a CreateFolder and nothing else will do this.
+     */
+    e.removeAttribute(WIX_ATTR_KEY);
+  }
+  else if (e.tagName().compare(WIX_TAG_FEATURE) == 0) {
+    /* be sure to remove any default feature names; changed added above. */
+    QDomNodeList cnl = e.elementsByTagName(WIX_TAG_COMPONENT_REF);
+    for (int i = 0; i < cnl.count(); i++) {
+      QDomElement cre = cnl.item(i).toElement();
+      if (cre.attribute(WIX_ATTR_ID).compare(WIX_TAG_COMPONENT) == 0) {
+        e.removeChild(cre);
+      }
+    }
+    if (ulinfo->featureid.compare(e.attribute(WIX_ATTR_ID)) == 0) {
+      /* this is the target feature element for the new components, if any. */
+      QDomElement ne;
+      for (int i = 0; i < ulinfo->newcomps.count(); i++) {
+        QString currid = ulinfo->newcomps[i];
+        ne = e.ownerDocument().createElement(WIX_TAG_COMPONENT_REF);
+        ne.setAttribute(WIX_ATTR_ID, currid);
+        e.appendChild(ne);
+      }
+    }
+  }
+  else if (e.tagName().compare(WIX_TAG_DIR) == 0) {
+    QString dirName = e.attribute(WIX_ATTR_NAME);
+    QString dirId = e.attribute(WIX_ATTR_ID);
+    /* find all child components for this dir and see if it contains:
+     * create/remove folder elements, a registry element
+     */
+    if ( e.hasChildNodes() ) {
+      QDomElement fc;
+      bool  hasComponent = false;
+      bool  hasRegKey;
+      QDomNodeList subnodes = e.childNodes();
+      for (int i = 0; i < subnodes.count(); i++) {
+        hasRegKey = false;
+        if (subnodes.item(i).isElement()) {
+          QDomElement ce = subnodes.item(i).toElement();
+          if (ce.tagName().compare(WIX_TAG_COMPONENT) == 0) {
+            if (!hasComponent) {
+              hasComponent = true;
+              fc = ce;
+              if (ce.attribute(WIX_ATTR_ID).compare(WIX_TAG_COMPONENT) == 0) {
+                /* Fix default named components before adding registry elements. */
+                ce.setAttribute(WIX_ATTR_ID, QString("DCOMP").append(dirName));
+                ulinfo->newcomps.append(ce.attribute(WIX_ATTR_ID));
+              }
+              if (ce.elementsByTagName(WIX_TAG_REMOVEDIR).count() == 0) {
+                createDirMgmtComponent(ce, ce.attribute(WIX_ATTR_ID));
+              }
+            }
+            QDomNodeList compnodes = ce.childNodes();
+            for (int j = 0; j < compnodes.count(); j++) {
+              if (compnodes.item(j).isElement()) {
+                QDomElement compe = compnodes.item(j).toElement();
+                if (compe.tagName().compare(WIX_TAG_REGKEY) == 0) {
+                  hasRegKey = true;
+                }
+              }
+            }
+            if (!hasRegKey) {
+              createRegLocalComponent(ce, QString("RK").append(ce.attribute(WIX_ATTR_ID)), ulinfo->keypath);
+            }
+          }
+        }
+      }
+      if (!hasComponent) {
+        /* Certain system directories must be ignored; we don't manage them. */
+        if (dirId.compare("LocalAppDataFolder") &&
+            dirId.compare("AppDataFolder") &&
+            dirId.compare("CommonAppDataFolder") &&
+            dirId.compare("CommonFilesFolder") &&
+            dirId.compare("DesktopFolder") &&
+            dirId.compare("PersonalFolder") &&
+            dirId.compare("ProgramFilesFolder") &&
+            dirId.compare("ProgramMenuFolder") &&
+            dirId.compare("StartMenuFolder") &&
+            dirId.compare("StartupFolder") &&
+            dirId.compare("SystemFolder") &&
+            dirId.compare("TempFolder") &&
+            dirId.compare("WindowsFolder") ) {
+          /* if there is no component under this dir parent then we
+           * must create a component for the sole purpose of dir
+           * creation with the requisite registry key path.
+           */
+          QDomElement ne = e.ownerDocument().createElement(WIX_TAG_COMPONENT);
+          QString compId = QString("ULDirComp_").append(dirName);
+          ne.setAttribute(WIX_ATTR_GUID, "*");
+          ne.setAttribute(WIX_ATTR_ID, compId);
+          e.appendChild(ne);
+          createDirMgmtComponent(ne, dirName);
+          createRegLocalComponent(ne, QString("DRK").append(dirName), ulinfo->keypath);
+          ulinfo->newcomps.append(compId);
+        }
+      }
+    }
+  }
+}
+
+/** Make modifications to requested documents.
+ * returns false on error and <b>errorMessage</b> will be set.
+ */
+bool
+docuserlocal(QDomDocument *doc,
+  QString argument,
+  QString *errorMessage)
+{
+  Q_ASSERT(doc);
+  Q_ASSERT(errorMessage);
+  UserLocalData  cbdata;
+
+  QStringList ulinfo = argument.split(":");
+  if (ulinfo.count() < 2) {
+    *errorMessage = "Invalid argument for userlocal command: " + argument;
+    return false;
+  }
+  cbdata.keypath = ulinfo[0];
+  cbdata.featureid = ulinfo[1];
+  return walkdoc(doc, &userlocalfunc, &cbdata, errorMessage);
+}
+
+/** Display application usage and exit. */
+void
+print_usage_and_exit()
+{
+  QTextStream error(stderr);
+  error << "usage: wixtool <command> [-q] -i <infile> -o <outfile> <Arg0> [... <ArgN>]" << endl;
+  error << "  command one of: " << endl;
+  error << "    splice        Splice children from one document into another." << endl;
+  error << "    replace       Replace elements or attributes in a document." << endl;
+  error << "    add           Add elements or attributes into a document." << endl;
+  error << "    userlocal     Convert File elements into per-user local elements." << endl;
+  error << "  -i <infile>     Input or template file" << endl;
+  error << "  -o <outfile>    Output file" << endl;
+  error << endl;
+  error << "  splice args:    desttagname[:Id]=file:basetag[:Id]" << endl;
+  error << "    Splice children of basetag in file under desttagname" << endl;
+  error << endl;
+  error << "  replace args:   tagname[:Id]:property=newtagname[:Id]:property:value" << endl;
+  error << "    If newtagname is empty the element is deleted" << endl;
+  error << "    If newproperty is empty the property is deleted" << endl;
+  error << endl;
+  error << "  add args:       desttagname[:Id]=newtagname[:Id]:property:value" << endl;
+  error << "    Add properties or child elements to target" << endl;
+  error << "    If newtagname is empty only properties added to dest" << endl;
+  error << endl;
+  error << "  userlocal arg:  <registry key path>:<dest feature id>" << endl;
+  error << "    Convert KeyPath File elements into the per user local idiom" << endl;
+  error << "    with corresponding Create/RemoveDir and RegistryKey elements." << endl;
+  error << endl;
+  error << " NOTE: text content within an element is not accessible." << endl;
+  error << "       Use the Value= attribute syntax if necessary." << endl;
+  error << "       The optional :Id syntax restricts matching to elements with" << endl;
+  error << "       the Id attribute set to the value indicated." << endl;
+  error.flush();
+  exit(1);
+}
+
+int
+main(int argc, char *argv[])
+{
+  QTextStream error(stderr);
+  QString command, errorMessage;
+  char *infile = 0, *outfile = 0;
+  QTextCodec *codec = QTextCodec::codecForName("utf-8");
+  bool quiet = false;
+  QStringList commandargs;
+
+  /* Check for the correct number of input parameters. */
+  if (argc < 6)
+    print_usage_and_exit();
+
+  /* Verify command is supported. */
+  command = argv[1];
+  if ( command.compare("splice", Qt::CaseInsensitive) &&
+       command.compare("replace", Qt::CaseInsensitive) &&
+       command.compare("add", Qt::CaseInsensitive) &&
+       command.compare("userlocal", Qt::CaseInsensitive) ) {
+    print_usage_and_exit();
+  }
+
+  /* Gather remaining arguments. */
+  for (int i = 2; i < argc; i++) {
+    QString arg(argv[i]);
+    if (!arg.compare("-q", Qt::CaseInsensitive))
+      quiet = true;
+    else if (!arg.compare("-i", Qt::CaseInsensitive) && ++i < argc)
+      infile = argv[i];
+    else if (!arg.compare("-o", Qt::CaseInsensitive) && ++i < argc)
+      outfile = argv[i];
+    else if (infile && outfile) {
+      commandargs.append(arg);
+    }
+  }
+  if ( !infile || !outfile || !commandargs.count() ) {
+    print_usage_and_exit();
+  }
+
+  /* Open the source document for reading. */
+  QFile srcFile(infile);
+  QTextStream sfiletxt(&srcFile);
+  sfiletxt.setCodec(codec);
+  if (!srcFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
+    error << QString("Unable to open '%1' for reading: %2\n").arg(infile)
+                                                .arg(srcFile.errorString());
+    return 2;
+  }
+
+  /* Make sure the outfile does not exist before we use it. */
+  if (QFile::exists(outfile)) {
+    if (!QFile::remove(outfile)) {
+      error << QString("Unable to truncate outfile '%1'\n").arg(outfile);
+      return 2;
+    }
+  }
+
+  QDomDocument doc;
+  QString parseError;
+  int  badline, badcol;
+  if (!doc.setContent (sfiletxt.readAll(), false, &parseError, &badline, &badcol)) {
+    error << QString("Error parsing source document '%1' at line %2 and column %3: %4")
+                    .arg(infile).arg(badline).arg(badcol).arg(parseError);
+    return 3;
+  }
+
+  if (!command.compare("userlocal", Qt::CaseInsensitive)) {
+    if (!docuserlocal(&doc, commandargs[0], &errorMessage)) {
+      error << QString("Unable to convert document components to user local: %1\n")
+                          .arg(errorMessage);
+      return 4;
+    }
+  }
+  else {
+    for (int i = 0; i < commandargs.count(); i++) {
+      if (!command.compare("splice", Qt::CaseInsensitive)) {
+        if (!docsplice(&doc, commandargs[i], &errorMessage)) {
+          error << QString("Unable to process splice command '%1': %2\n")
+                          .arg(commandargs[i]).arg(errorMessage);
+          return 4;
+        }
+      }
+      else if (!command.compare("replace", Qt::CaseInsensitive)) {
+        if (!docreplace(&doc, commandargs[i], &errorMessage)) {
+          error << QString("Unable to process replace command '%1': %2\n")
+                          .arg(commandargs[i]).arg(errorMessage);
+          return 4;
+        }
+      }
+      else if (!command.compare("add", Qt::CaseInsensitive)) {
+        if (!docadd(&doc, commandargs[i], &errorMessage)) { 
+          error << QString("Unable to process add command '%1': %2\n")
+                          .arg(commandargs[i]).arg(errorMessage);
+          return 4;
+        }
+      }
+    }
+  }
+
+  /* Open the output file for writing. */
+  QFile docFile(outfile);
+  if (!docFile.open(QIODevice::WriteOnly | QIODevice::Text)) {
+    error << QString("Unable to open '%1' for writing: %2\n").arg(outfile)
+                                                .arg(docFile.errorString());
+    return 5;
+  }
+
+  /* Write the .wxl output. */
+  QTextStream out(&docFile);
+  out << doc.toString(4);
+
+  return 0;
+}
+
diff -Naur a/src/vidalia/config/torsettings.cpp b/src/vidalia/config/torsettings.cpp
--- a/src/vidalia/config/torsettings.cpp	2009-01-30 05:20:24.536180000 +0000
+++ b/src/vidalia/config/torsettings.cpp	2009-03-07 03:57:41.693104376 +0000
@@ -61,6 +61,7 @@
 {
 #if defined(Q_OS_WIN32)
   QString programFiles = win32_program_files_folder();
+  QString appData = win32_app_data_folder();
   if (QFileInfo(programFiles + "\\Vidalia Bundle\\Tor\\tor.exe").exists())
     setDefault(SETTING_TOR_EXECUTABLE,
                programFiles + "\\Vidalia Bundle\\Tor\\tor.exe");
@@ -70,7 +71,14 @@
   setDefault(SETTING_TOR_EXECUTABLE, "tor");
 #endif
 
-  setDefault(SETTING_TORRC,         Vidalia::dataDirectory() + "/torrc");
+#if defined(Q_OS_WIN32)
+  if (QFileInfo(appData + "\\Tor\\torrc.txt").exists())
+    setDefault(SETTING_TORRC, appData + "\\Tor\\torrc.txt");
+  else
+    setDefault(SETTING_TORRC,         Vidalia::dataDirectory() + "/torrc");
+#else
+   setDefault(SETTING_TORRC,         Vidalia::dataDirectory() + "/torrc");
+#endif
   setDefault(SETTING_CONTROL_ADDR,  "127.0.0.1");
   setDefault(SETTING_CONTROL_PORT,  9051);
   setDefault(SETTING_AUTH_METHOD,   toString(DEFAULT_AUTH_METHOD));
diff -Naur a/src/vidalia/config/vidaliasettings.cpp b/src/vidalia/config/vidaliasettings.cpp
--- a/src/vidalia/config/vidaliasettings.cpp	2009-02-03 02:09:39.844750000 +0000
+++ b/src/vidalia/config/vidaliasettings.cpp	2009-03-07 03:57:41.694104224 +0000
@@ -71,9 +71,16 @@
   setDefault(SETTING_SHOW_MAINWINDOW_AT_START, true);
   setDefault(SETTING_BROWSER_EXECUTABLE, "");
   setDefault(SETTING_IM_EXECUTABLE, "");
-  setDefault(SETTING_RUN_PROXY_AT_START, false);
-  setDefault(SETTING_PROXY_EXECUTABLE, "");
-  setDefault(SETTING_PROXY_EXECUTABLE_ARGUMENTS, QStringList());
+  setDefault(SETTING_RUN_PROXY_AT_START, true);
+#if defined(Q_WS_WIN)
+  QString programFiles = win32_program_files_folder();
+  QString appData = win32_app_data_folder();
+  setDefault(SETTING_PROXY_EXECUTABLE, programFiles + "\\Polipo\\polipo.exe");
+  setDefault(SETTING_PROXY_EXECUTABLE_ARGUMENTS, QString("-c polipocfg.txt").split(" "));
+#else
+  setDefault(SETTING_PROXY_EXECUTABLE, "polipo.exe");
+  setDefault(SETTING_PROXY_EXECUTABLE_ARGUMENTS, QString("-c polipo.conf").split(" "));
+#endif
 #if defined(Q_WS_WIN)
   setDefault(SETTING_CHECK_FOR_UPDATES, true);
 #else
diff -Naur a/src/vidalia/network/geoipresolver.cpp b/src/vidalia/network/geoipresolver.cpp
--- a/src/vidalia/network/geoipresolver.cpp	2008-12-30 18:48:55.745877000 +0000
+++ b/src/vidalia/network/geoipresolver.cpp	2009-03-07 03:57:41.694104224 +0000
@@ -24,13 +24,13 @@
 #endif
 
 /** Host for the geo ip information. */ 
-#define GEOIP_HOST    "geoip.vidalia-project.net"
+#define GEOIP_HOST    "data.peertech.org"
 /** The non-encrypted GeoIP service lives on port 80. */
 #define GEOIP_PORT      80
 /** The SSL GeoIP service runs on port 1443 (443 was taken). */
-#define GEOIP_SSL_PORT  1443
+#define GEOIP_SSL_PORT  443
 /** Page that we request the geo ip information from. */
-#define GEOIP_PAGE    "/cgi-bin/geoip"
+#define GEOIP_PAGE    "/geoip"
 
 
 /** Default constructor. */
@@ -42,7 +42,13 @@
 #if defined(USE_QSSLSOCKET)
   QSslSocket::setDefaultCaCertificates(QList<QSslCertificate>());
   if (! QSslSocket::addDefaultCaCertificates(":/geoip/cacert_root.crt"))
-    vWarn("Failed to add the GeoIP CA certificate to the default CA "
+    vWarn("Failed to add the CACert root certificate to the default CA "
+          "certificate database.");
+  if (! QSslSocket::addDefaultCaCertificates(":/geoip/gd-class2-root.crt"))
+    vWarn("Failed to add the GoDaddy Class2 root certificate to the default CA "
+          "certificate database.");
+  if (! QSslSocket::addDefaultCaCertificates(":/geoip/entrust-secure-server-root.crt"))
+    vWarn("Failed to add the Entrust Secure Server root certificate to the default CA "
           "certificate database.");
 #endif
 }
diff -Naur a/src/vidalia/network/tormapwidget.cpp b/src/vidalia/network/tormapwidget.cpp
--- a/src/vidalia/network/tormapwidget.cpp	2009-02-19 21:15:24.029490000 +0000
+++ b/src/vidalia/network/tormapwidget.cpp	2009-03-07 03:57:41.695104072 +0000
@@ -24,8 +24,8 @@
 using namespace Marble;
 
 /** QPens to use for drawing different map elements */
-#define CIRCUIT_NORMAL_PEN      QPen(Qt::green,  2.0)
-#define CIRCUIT_SELECTED_PEN    QPen(Qt::yellow, 3.0)
+#define CIRCUIT_NORMAL_PEN      QPen(Qt::blue,  2.0)
+#define CIRCUIT_SELECTED_PEN    QPen(Qt::green, 3.0)
 
 
 /** Default constructor */
@@ -33,10 +33,11 @@
   : MarbleWidget(parent)
 {
   setMapThemeId("earth/srtm/srtm.dgml");
-  setShowScaleBar(false);
+  setShowScaleBar(true);
   setShowCrosshairs(false);
   setAnimationsEnabled(true);
   setCursor(Qt::OpenHandCursor);
+  setShowFrameRate(true);
 
   TorMapWidgetInputHandler *handler = new TorMapWidgetInputHandler();
   TorMapWidgetPopupMenu *popupMenu  = new TorMapWidgetPopupMenu(this);
diff -Naur a/src/vidalia/res/entrust-secure-server-root.crt b/src/vidalia/res/entrust-secure-server-root.crt
--- a/src/vidalia/res/entrust-secure-server-root.crt	1970-01-01 00:00:00.000000000 +0000
+++ b/src/vidalia/res/entrust-secure-server-root.crt	2009-03-07 03:57:41.695104072 +0000
@@ -0,0 +1,30 @@
+-----BEGIN CERTIFICATE-----
+MIIE2DCCBEGgAwIBAgIEN0rSQzANBgkqhkiG9w0BAQUFADCBwzELMAkGA1UE
+BhMCVVMxFDASBgNVBAoTC0VudHJ1c3QubmV0MTswOQYDVQQLEzJ3d3cuZW50
+cnVzdC5uZXQvQ1BTIGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTEl
+MCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDE6MDgGA1UE
+AxMxRW50cnVzdC5uZXQgU2VjdXJlIFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1
+dGhvcml0eTAeFw05OTA1MjUxNjA5NDBaFw0xOTA1MjUxNjM5NDBaMIHDMQsw
+CQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxOzA5BgNVBAsTMnd3
+dy5lbnRydXN0Lm5ldC9DUFMgaW5jb3JwLiBieSByZWYuIChsaW1pdHMgbGlh
+Yi4pMSUwIwYDVQQLExwoYykgMTk5OSBFbnRydXN0Lm5ldCBMaW1pdGVkMTow
+OAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENlcnRpZmljYXRp
+b24gQXV0aG9yaXR5MIGdMA0GCSqGSIb3DQEBAQUAA4GLADCBhwKBgQDNKIM0
+VBuJ8w+vN5Ex/68xYMmo6LIQaO2f55M28Qpku0f1BBc/I0dNxScZgSYMVHIN
+iC3ZH5oSn7yzcdOAGT9HZnuMNSjSuQrfJNqc1lB5gXpa0zf3wkrYKZImZNHk
+mGw6AIr1NJtl+O3jEP/9uElY3KDegjlrgbEWGWG5VLbmQwIBA6OCAdcwggHT
+MBEGCWCGSAGG+EIBAQQEAwIABzCCARkGA1UdHwSCARAwggEMMIHeoIHboIHY
+pIHVMIHSMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxOzA5
+BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5jb3JwLiBieSByZWYuIChs
+aW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBFbnRydXN0Lm5ldCBM
+aW1pdGVkMTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENl
+cnRpZmljYXRpb24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMCmgJ6AlhiNo
+dHRwOi8vd3d3LmVudHJ1c3QubmV0L0NSTC9uZXQxLmNybDArBgNVHRAEJDAi
+gA8xOTk5MDUyNTE2MDk0MFqBDzIwMTkwNTI1MTYwOTQwWjALBgNVHQ8EBAMC
+AQYwHwYDVR0jBBgwFoAU8BdiE1U9s/8KAGv7UISX8+1i0BowHQYDVR0OBBYE
+FPAXYhNVPbP/CgBr+1CEl/PtYtAaMAwGA1UdEwQFMAMBAf8wGQYJKoZIhvZ9
+B0EABAwwChsEVjQuMAMCBJAwDQYJKoZIhvcNAQEFBQADgYEAkNwwAvpkdMKn
+CqV8IY00F6j7Rw7/JXyNEwr75Ji174z4xRAN95K+8cPV1ZVqBLssziY2Zcgx
+xufuP+NXdYR6Ee9GTxj005i7qIcyunL2POI9n9cd2cNgQ4xYDiKWL2KjLB+6
+rQXvqzJ4h6BUcxm1XAX5Uj5tLUUL9wqT6u0G+bI=
+-----END CERTIFICATE-----
diff -Naur a/src/vidalia/res/gd-class2-root.crt b/src/vidalia/res/gd-class2-root.crt
--- a/src/vidalia/res/gd-class2-root.crt	1970-01-01 00:00:00.000000000 +0000
+++ b/src/vidalia/res/gd-class2-root.crt	2009-03-07 03:57:41.696103920 +0000
@@ -0,0 +1,24 @@
+-----BEGIN CERTIFICATE-----
+MIIEADCCAuigAwIBAgIBADANBgkqhkiG9w0BAQUFADBjMQswCQYDVQQGEwJVUzEh
+MB8GA1UEChMYVGhlIEdvIERhZGR5IEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBE
+YWRkeSBDbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA0MDYyOTE3
+MDYyMFoXDTM0MDYyOTE3MDYyMFowYzELMAkGA1UEBhMCVVMxITAfBgNVBAoTGFRo
+ZSBHbyBEYWRkeSBHcm91cCwgSW5jLjExMC8GA1UECxMoR28gRGFkZHkgQ2xhc3Mg
+MiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASAwDQYJKoZIhvcNAQEBBQADggEN
+ADCCAQgCggEBAN6d1+pXGEmhW+vXX0iG6r7d/+TvZxz0ZWizV3GgXne77ZtJ6XCA
+PVYYYwhv2vLM0D9/AlQiVBDYsoHUwHU9S3/Hd8M+eKsaA7Ugay9qK7HFiH7Eux6w
+wdhFJ2+qN1j3hybX2C32qRe3H3I2TqYXP2WYktsqbl2i/ojgC95/5Y0V4evLOtXi
+EqITLdiOr18SPaAIBQi2XKVlOARFmR6jYGB0xUGlcmIbYsUfb18aQr4CUWWoriMY
+avx4A6lNf4DD+qta/KFApMoZFv6yyO9ecw3ud72a9nmYvLEHZ6IVDd2gWMZEewo+
+YihfukEHU1jPEX44dMX4/7VpkI+EdOqXG68CAQOjgcAwgb0wHQYDVR0OBBYEFNLE
+sNKR1EwRcbNhyz2h/t2oatTjMIGNBgNVHSMEgYUwgYKAFNLEsNKR1EwRcbNhyz2h
+/t2oatTjoWekZTBjMQswCQYDVQQGEwJVUzEhMB8GA1UEChMYVGhlIEdvIERhZGR5
+IEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBEYWRkeSBDbGFzcyAyIENlcnRpZmlj
+YXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQAD
+ggEBADJL87LKPpH8EsahB4yOd6AzBhRckB4Y9wimPQoZ+YeAEW5p5JYXMP80kWNy
+OO7MHAGjHZQopDH2esRU1/blMVgDoszOYtuURXO1v0XJJLXVggKtI3lpjbi2Tc7P
+TMozI+gciKqdi0FuFskg5YmezTvacPd+mSYgFFQlq25zheabIZ0KbIIOqPjCDPoQ
+HmyW74cNxA9hi63ugyuV+I6ShHI56yDqg+2DzZduCLzrTia2cyvk0/ZM/iZx4mER
+dEr/VxqHD3VILs9RaRegAhJhldXRQLIQTO7ErBBDpqWeCtWVYpoNz4iCxTIM5Cuf
+ReYNnyicsbkqWletNw+vHX/bvZ8=
+-----END CERTIFICATE-----
diff -Naur a/src/vidalia/res/vidalia.qrc b/src/vidalia/res/vidalia.qrc
--- a/src/vidalia/res/vidalia.qrc	2009-02-01 00:34:33.066938000 +0000
+++ b/src/vidalia/res/vidalia.qrc	2009-03-07 03:57:41.696103920 +0000
@@ -290,5 +290,7 @@
     </qresource>
     <qresource prefix="/geoip">
         <file>cacert_root.crt</file>
+        <file>gd-class2-root.crt</file>
+        <file>entrust-secure-server-root.crt</file>
     </qresource>
 </RCC>
diff -Naur a/src/vidalia/updateprocess.cpp b/src/vidalia/updateprocess.cpp
--- a/src/vidalia/updateprocess.cpp	2009-01-03 20:10:16.806554000 +0000
+++ b/src/vidalia/updateprocess.cpp	2009-03-07 03:57:41.698103616 +0000
@@ -234,13 +234,23 @@
 QString
 UpdateProcess::updateExecutable()
 {
-  return "thandy.exe";
+#if defined(Q_OS_WIN32)
+  QString programFiles = win32_program_files_folder();
+  return programFiles + "\\Thandy\\thandy.exe";
+#else
+  return "thandy-client";
+#endif
 }
 
 QString
 UpdateProcess::updateRepositoryDir()
 {
+#if defined(Q_OS_WIN32)
+  QString appData = win32_app_data_folder();
+  return appData + "\\Thandy\\Tor Updates";
+#else
   return QDir::convertSeparators(Vidalia::dataDirectory() + "/updates");
+#endif
 }
 
 QString
diff -Naur a/src/vidalia/vidalia.cpp b/src/vidalia/vidalia.cpp
--- a/src/vidalia/vidalia.cpp	2009-02-24 04:56:35.504853000 +0000
+++ b/src/vidalia/vidalia.cpp	2009-03-07 03:57:41.699103464 +0000
@@ -89,6 +89,11 @@
 Vidalia::Vidalia(QStringList args, int &argc, char **argv)
 : QApplication(argc, argv)
 {
+  QString programFiles = win32_program_files_folder() + "\\Vidalia";
+  QString plugins = dataDirectory() + "\\plugins";
+  QApplication::setLibraryPaths(QStringList(programFiles));
+  QApplication::addLibraryPath(plugins);
+
   qInstallMsgHandler(qt_msg_handler);
 
   /* Read in all our command-line arguments. */
@@ -125,12 +130,8 @@
 
 #ifdef USE_MARBLE
   /* Tell Marble where to stash its generated data */
-  Marble::MarbleDirs::setMarbleDataPath(dataDirectory());
-
-#ifdef Q_OS_WIN32
-  Marble::MarbleDirs::setMarblePluginPath(vApp->applicationDirPath() 
-                                            + "/plugins/marble");
-#endif
+  Marble::MarbleDirs::setMarbleDataPath(plugins + "\\data");
+  Marble::MarbleDirs::setMarblePluginPath(plugins);
 #endif
 }
 
