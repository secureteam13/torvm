diff -Naur orig-kamikaze/package/tor/Makefile mod-torpkg-kamikaze/package/tor/Makefile
--- orig-kamikaze/package/tor/Makefile	1970-01-01 00:00:00.000000000 +0000
+++ mod-torpkg-kamikaze/package/tor/Makefile	2008-10-01 21:19:28.077996000 +0000
@@ -0,0 +1,111 @@
+#
+# Copyright (C) 2008 OpenWrt.org
+#
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+#
+# $Id: Makefile 11265 2008-05-25 13:45:00Z blogic $
+
+include $(TOPDIR)/rules.mk
+include $(INCLUDE_DIR)/kernel.mk
+
+PKG_NAME:=tor
+PKG_VERSION:=0.2.1.7-alpha
+
+PKG_RELEASE:=1
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=http://www.torproject.org/dist/
+PKG_MD5SUM:=f4eeebb9d536317e4a5391cb03732947
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/tor
+  SECTION:=net
+  CATEGORY:=Network
+  DEPENDS:=+libevent +libopenssl +libpthread +zlib
+  TITLE:=An anonymous Internet communication system
+  URL:=http://tor.eff.org/
+endef
+
+define Package/tor/description
+ Tor is a toolset for a wide range of organizations and people that want to 
+ improve their safety and security on the Internet. Using Tor can help you 
+ anonymize web browsing and publishing, instant messaging, IRC, SSH, and 
+ more. Tor also provides a platform on which software developers can build 
+ new applications with built-in anonymity, safety, and privacy features.
+endef
+
+define Package/tor/conffiles
+/etc/tor/torrc
+endef
+
+define Package/tor/postinst
+#!/bin/sh
+
+name=tor
+id=52
+
+# do not change below
+# # check if we are on real system
+if [ -z "$${IPKG_INSTROOT}" ]; then
+        # create copies of passwd and group, if we use squashfs
+        rootfs=`mount |awk '/root/ { print $$5 }'`
+        if [ "$$rootfs" = "squashfs" ]; then
+                if [ -h /etc/group ]; then
+                        rm /etc/group
+                        cp /rom/etc/group /etc/group
+                fi
+                if [ -h /etc/passwd ]; then
+                        rm /etc/passwd
+                        cp /rom/etc/passwd /etc/passwd
+                fi
+        fi
+fi
+
+echo ""
+if [ -z "$$(grep ^\\$${name}: $${IPKG_INSTROOT}/etc/group)" ]; then
+        echo "adding group $$name to /etc/group"
+        echo "$${name}:x:$${id}:" >> $${IPKG_INSTROOT}/etc/group
+fi
+
+if [ -z "$$(grep ^\\$${name}: $${IPKG_INSTROOT}/etc/passwd)" ]; then
+        echo "adding user $name to /etc/passwd"
+        echo "$${name}:x:$${id}:$${id}:$${name}:/tmp/.$${name}:/bin/false" >> $${IPKG_INSTROOT}/etc/passwd
+fi
+endef
+
+EXTRA_CFLAGS += -I$(LINUX_DIR)/include
+EXTRA_CPPFLAGS += -I$(LINUX_DIR)/include
+
+CONFIGURE_ARGS += \
+	--enable-eventdns \
+	--enable-transparent \
+	--enable-threads \
+	--with-libevent-dir="$(STAGING_DIR)/usr" \
+	--with-ssl-dir="$(STAGING_DIR)/usr" \
+
+CONFIGURE_VARS += \
+	CROSS_COMPILE="yes" \
+
+
+# pass CFLAGS again to override -O2 set by configure
+define Build/Compile
+	$(MAKE) -C $(PKG_BUILD_DIR) \
+		CFLAGS="$(TARGET_CFLAGS) -I$(LINUX_DIR)/include" \
+		DESTDIR="$(PKG_INSTALL_DIR)" \
+		all install
+endef
+
+define Package/tor/install
+	$(INSTALL_DIR) $(1)/usr/sbin
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/src/or/tor $(1)/usr/sbin/
+	$(INSTALL_DIR) $(1)/etc/init.d
+	$(INSTALL_BIN) ./files/tor.init $(1)/etc/init.d/tor
+	$(INSTALL_DIR) $(1)/etc/tor
+	$(INSTALL_DATA) ./files/torrc $(1)/etc/tor/torrc
+	$(INSTALL_DIR) $(1)/var/log/tor
+	$(INSTALL_DIR) $(1)/var/run/tor
+endef
+
+$(eval $(call BuildPackage,tor))
diff -Naur orig-kamikaze/package/tor/files/tor.init mod-torpkg-kamikaze/package/tor/files/tor.init
--- orig-kamikaze/package/tor/files/tor.init	1970-01-01 00:00:00.000000000 +0000
+++ mod-torpkg-kamikaze/package/tor/files/tor.init	2008-10-16 03:58:30.534196384 +0000
@@ -0,0 +1,113 @@
+#!/bin/sh 
+
+BIN=tor
+DEFAULT=/etc/default/$BIN
+HOME_D=/home/$BIN
+CONF_F=$HOME_D/torrc
+LOG_D=/var/log/$BIN
+LOG_F=$LOG_D/notices.log
+SLOG_F=$LOG_D/start.log
+DATA_D=$HOME_D/data
+RUN_D=/var/run/$BIN
+PID_F=$RUN_D/$BIN.pid
+RUN_USER=$BIN
+RUN_GROUP=$BIN
+TOR_INTF=eth0
+grep eth1: /proc/net/dev >/dev/null 2>&1
+if [ $? -eq 0 ]; then
+  TOR_INTF=eth1
+fi
+MYIP=$(ifconfig $TOR_INTF | grep 'inet addr' | sed 's/.*inet addr://' | sed 's/ .*//')
+
+if [ "$1" = "start" ]; then
+	[ -f $DEFAULT ] && . $DEFAULT
+	[ -d $HOME_D ] || mkdir -p $HOME_D
+	[ -f $CONF_F ] || cp -f /etc/tor/torrc $CONF_F
+	[ -d $LOG_D ] || mkdir -p $LOG_D
+	chown $RUN_USER:$RUN_GROUP $LOG_D
+	[ -d $DATA_D ] || mkdir -p $DATA_D
+	chmod 700 $DATA_D
+	chown -R $RUN_USER:$RUN_GROUP $HOME_D
+	[ -d $RUN_D ] || mkdir -p $RUN_D
+	chown $RUN_USER:$RUN_GROUP $RUN_D
+	chmod 700 $RUN_D
+	rm -f $LOG_F >/dev/null 2>&1
+	# append any runtime options as needed
+	TMP_F="${CONF_F}_tmp"; \
+	ARGS=`cat /proc/cmdline` ; \
+	ARGS="_ $ARGS _" ; \
+	echo $ARGS | grep ' HASHPW=' >/dev/null 2>&1 ; \
+	if [ $? -eq 0 ]; then \
+	  HASHPW=`echo $ARGS | sed 's/.* HASHPW=//' | sed 's/ .*//'`; \
+	  cat $CONF_F | grep -v 'HashedControlPassword' > $TMP_F; \
+	  echo "HashedControlPassword ${HASHPW}" >> $TMP_F; \
+	  mv -f $TMP_F $CONF_F; \
+	fi; \
+	echo $ARGS | grep ' CTLSOCK=' >/dev/null 2>&1 ; \
+	if [ $? -eq 0 ]; then \
+	  CTLSOCK=`echo $ARGS | sed 's/.* CTLSOCK=//' | sed 's/ .*//'`; \
+	  CTLPORT=`echo $CTLSOCK | sed 's/.*://'`; \
+	  cat $CONF_F | grep -v 'ControlListenAddress' | grep -v ControlPort > $TMP_F; \
+	  echo "ControlPort ${CTLPORT}" >> $TMP_F; \
+	  echo "ControlListenAddress ${CTLSOCK}" >> $TMP_F; \
+	  mv -f $TMP_F $CONF_F; \
+	fi;
+	chown $RUN_USER:$RUN_GROUP $CONF_F
+	# start tor process
+	$BIN -f $CONF_F $OPTIONS > $SLOG_F 2>&1
+	# TODO for now used fixed control port accept rule
+	iptables -t nat -I PREROUTING -i $TOR_INTF -d $MYIP -p tcp --dport 9051 -j ACCEPT
+	# forcibly filter some traffic which should never go over Tor:
+	# no SMTP
+	iptables -t nat -A PREROUTING -i $TOR_INTF -s ! $MYIP -p tcp --dport 25 -j DROP
+	# no TCP DNS
+	iptables -t nat -A PREROUTING -i $TOR_INTF -s ! $MYIP -p tcp --dport 53 -j DROP
+	# no NetBIOS
+	iptables -t nat -A PREROUTING -i $TOR_INTF -s ! $MYIP -p tcp --dport 137 -j DROP
+	iptables -t nat -A PREROUTING -i $TOR_INTF -s ! $MYIP -p tcp --dport 138 -j DROP
+	iptables -t nat -A PREROUTING -i $TOR_INTF -s ! $MYIP -p tcp --dport 139 -j DROP
+	# trans proxy TCP and DNS
+	iptables -t nat -A PREROUTING -i $TOR_INTF -s ! $MYIP -p tcp -j REDIRECT --to 9095
+	iptables -t nat -A PREROUTING -i $TOR_INTF -s ! $MYIP -p udp --dport 53 -j REDIRECT --to 9093
+	# drop everything else ...
+	iptables -t nat -A PREROUTING -i $TOR_INTF -s ! $MYIP -j DROP
+
+elif [ "$1" = "stop" ]; then
+	# XXX TODO: replace this with a fail-safe shutdown
+	iptables -F
+	iptables -t nat -F
+	#[ -f $PID_F ] && kill $(cat $PID_F)
+	killall tor
+
+elif [ "$1" = "restart" ]; then
+	$0 stop
+	$0 start
+
+elif [ "$1" = "status" ]; then
+	while true; do
+	  clear;echo
+	  date
+	  echo
+	  echo "Tor VM local network IP address: $MYIP"
+	  echo
+	  # check if we are fully bootstrapped yet
+	  grep 'Bootstrapped 100' $LOG_F >/dev/null 2>&1
+	  if [ "$?" -ne "0" ]; then
+	  	echo "Tor is still trying to bootstrap into the network..."
+		echo "Be sure the Tor VM clock is correct and that your traffic"
+		echo " is not getting filtered upstream."
+		echo
+	  	grep Bootstrapped $LOG_F | sed 's/.*Bootstrapped/Bootstrapped/' | tail -6
+	  else
+	  	echo "Tor is fully connected into the Tor network."
+	  	echo "Transparent proxy traffic:"
+	  	iptables -n --verbose -t nat --list PREROUTING | sed 's/opt .*destination.*/destination/'|sed 's/    0.0.0.0.0           //'|sed "s/\-\- .*${MYIP}   //"|grep -v PREROUTING
+	  fi
+	  sleep 2
+	done  
+
+else
+	echo "Usage: $0 {start|stop|restart|status}" >&2
+	exit 1
+fi
+exit 0
diff -Naur orig-kamikaze/package/tor/files/torrc mod-torpkg-kamikaze/package/tor/files/torrc
--- orig-kamikaze/package/tor/files/torrc	1970-01-01 00:00:00.000000000 +0000
+++ mod-torpkg-kamikaze/package/tor/files/torrc	2008-10-01 21:23:43.794191444 +0000
@@ -0,0 +1,24 @@
+# Configuration for Tor VM
+RunAsDaemon 1
+User tor
+Group tor
+PidFile /var/run/tor/pid
+DataDirectory /home/tor/data
+Log notice file /var/log/tor/notices.log
+
+# Rely on netfilter for access control to transproxy ports
+TransListenAddress 0.0.0.0
+TransPort 9095
+DNSListenAddress 0.0.0.0
+DNSPort 9093
+
+
+# This needs to be a network available via host default route
+VirtualAddrNetwork 10.254.0.0/16
+
+# Misc. options
+# note that we disable .exit notation to protect against some attacks
+AutomapHostsSuffixes .onion
+AutomapHostsOnResolve 1
+
+# options appended from command line placed below:
